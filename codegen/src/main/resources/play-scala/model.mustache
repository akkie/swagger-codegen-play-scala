package {{package}}

{{#imports}}
import {{import}}
{{/imports}}

{{#models}}
{{#model}}

case class {{classname}} (
  {{#vars}}{{#description}}/* {{{description}}} */
  {{/description}}{{name}}: {{^required}}Option[{{/required}}{{^isEnum}}{{datatype}}{{/isEnum}}{{#isEnum}}{{classname}}.{{datatypeWithEnum}}{{/isEnum}}{{^required}}]{{/required}}{{#hasMore}},{{/hasMore}}{{^hasMore}}){{/hasMore}}
  {{/vars}}

/**
 * The companion object.
 */
object {{classname}} {
  import ai.x.play.json.Jsonx
  import play.api.libs.json.OFormat{{#hasEnums}}{{#vars}}{{#isEnum}}
  import {{invokerPackage}}.ApiJsonFormats.enumValueFormat

  /**
   * The `{{datatypeWithEnum}}` enum.
   */
  type {{datatypeWithEnum}} = {{datatypeWithEnum}}.Value
  object {{datatypeWithEnum}} extends Enumeration { {{#_enum}}
    val {{#fnEnumEntry}}{{.}}{{/fnEnumEntry}} = Value("{{.}}"){{/_enum}}
  }{{/isEnum}}{{/vars}}{{/hasEnums}}

  /**
   * Converts a [[{{classname}}]] class into a JSON object.
   */
  implicit val jsonFormat: OFormat[{{classname}}] = Jsonx.formatCaseClass[{{classname}}]
}
{{/model}}
{{/models}}
